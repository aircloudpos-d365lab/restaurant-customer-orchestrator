/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 08:54:00 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantCodOrder;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantOrder;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.Item;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderInputPayload;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderOutputPayload;
import com.d365lab.eatery.restaurantcustomerorchestrator.repositories.RestaurantCodOrderRepository;
import com.d365lab.eatery.restaurantcustomerorchestrator.repositories.RestaurantOrderRepository;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.CartService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.data.domain.Page;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestaurantOrderServiceImpl_ESTest extends RestaurantOrderServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant("d((a3H'*#75", "2", "com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllDeliveredOrderForARestaurant("jg", "9", "COD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"COD\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      Integer integer0 = new Integer(534);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer1 = new Integer(661);
      restaurantOrderServiceImpl0.updateOutForDeliveryFlagForOrder(integer1, integer0);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = Integer.getInteger("org.springframework.core.io.buffer.DataBufferUtils$ReadableByteChannelGenerator", (-1324));
      restaurantOrderServiceImpl0.updateIsOrderStartedPreparingByRestaurantFlagForOrder((Integer) null, integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      Integer integer0 = new Integer(534);
      Double double0 = new Double(0.0);
      RestaurantCodOrder restaurantCodOrder0 = new RestaurantCodOrder(integer0, integer0, double0, "", "");
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantCodOrder0).when(restaurantCodOrderRepository0).findIfCodOrderExists(anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer1 = new Integer(661);
      restaurantOrderServiceImpl0.updateDeliveredFlagForCodOrder(integer0, integer1, "b'9<{}cvvxR7=R:>`N1");
      assertFalse(integer0.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer(0);
      restaurantOrderServiceImpl0.updateOrderPreparedFlagForOrder(integer0, (Integer) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(restaurantOrderRepository0).findAllOrdersForRestaurantWithPagination(anyString() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer(3630);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOrdersForARestaurant("", integer0, integer0, "=wYTFlWn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Page.empty();
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(restaurantOrderRepository0).findAllOrdersForRestaurantWithPagination(anyString() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer(5);
      Integer integer1 = Integer.getInteger("org.springframework.data.mapp%ng.PropertyPath", 5);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOrdersForARestaurant("org.springframework.data.mapp%ng.PropertyPath", integer0, integer1, "org.springframework.data.mapp%ng.PropertyPath");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      try { 
        restaurantOrderServiceImpl0.getAllAcceptedOrderForARestaurant("COD");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Date: 2/14/14 8:21 PM could not be parsed.
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Double double0 = new Double(1.0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderRepository0).findRevenueThisMonth(anyString() , anyInt() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Double double1 = restaurantOrderServiceImpl0.getRevenueThisMonthForARestaurant("RIUSzEbVj~Dm2");
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Double double0 = new Double((-1.0));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderRepository0).findRevenueThisMonth(anyString() , anyInt() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Double double1 = restaurantOrderServiceImpl0.getRevenueThisMonthForARestaurant("Abbreviation must not be null!");
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Double double0 = new Double(1);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderRepository0).findRevenueToday(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Double double1 = restaurantOrderServiceImpl0.getRevenueForARestaurant("mNtmC6cy||[.diF0V");
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Double double0 = new Double((-3156.58733676919));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderRepository0).findRevenueToday(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Double double1 = restaurantOrderServiceImpl0.getRevenueForARestaurant("org.springframework.data.mapping.PropertyPath$Key");
      assertEquals((-3156.58733676919), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderRepository0).findRestaurantOrderDetails(anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer((-1));
      RestaurantOrder restaurantOrder1 = restaurantOrderServiceImpl0.getOrderDetails(integer0);
      assertNull(restaurantOrder1.getRestaurantTenantId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(restaurantOrderRepository0).findHighestOrderValueToday(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Double double0 = restaurantOrderServiceImpl0.getHighestOrderForARestaurant("");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Double double0 = new Double(314.521068);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderRepository0).findHighestOrderValueToday(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Double double1 = restaurantOrderServiceImpl0.getHighestOrderForARestaurant("sNBKg$'Lowe}/TwleB");
      assertEquals(314.521068, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Double double0 = new Double((-2650.2));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderRepository0).findHighestOrderValueToday(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Double double1 = restaurantOrderServiceImpl0.getHighestOrderForARestaurant(";");
      assertEquals((-2650.2), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findCancelledOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long0 = restaurantOrderServiceImpl0.getCancelledOrderCountForARestaurant("&&!6}");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long(1L);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findCancelledOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getCancelledOrderCountForARestaurant("84O*q&h ]K5Ap");
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long((-1L));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findCancelledOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getCancelledOrderCountForARestaurant("");
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Stack<RestaurantOrder> stack0 = new Stack<RestaurantOrder>();
      Integer integer0 = new Integer(834);
      Double double0 = new Double(834);
      MockDate mockDate0 = new MockDate(79, 79, 31, (-142), 834, (-1));
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "cod", integer0, double0, double0, double0, "cod", "yyyyMMdd", "cod", "T/ghzrRG3@x<p^L3pA", "ewKK$?EtTyrmz5EN", integer0, "f4h", integer0, integer0, (Integer) null, integer0, "yyyyMMdd", double0, double0, integer0, integer0, integer0, mockDate0, mockDate0, mockDate0, (Date) null, mockDate0, integer0, mockDate0, integer0, "", (Date) null, (Date) null);
      stack0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrderRepository0).findQueuedOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllQueuedOrderForARestaurant(".Ks.W3(UX4aIv");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      LinkedList<RestaurantOrder> linkedList0 = new LinkedList<RestaurantOrder>();
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderRepository0).findOutForDeliveryOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllOutForDeliveryOrderForARestaurant("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      LinkedList<RestaurantOrder> linkedList0 = new LinkedList<RestaurantOrder>();
      Integer integer0 = new Integer((-124019115));
      Double double0 = new Double((-124019115));
      MockDate mockDate0 = new MockDate((-839L));
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "5XeK3", integer0, double0, double0, double0, "5XeK3", "5XeK3", "com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", "cod", "5XeK3", integer0, "5XeK3", integer0, integer0, integer0, integer0, "5XeK3", (Double) null, double0, integer0, integer0, integer0, mockDate0, mockDate0, mockDate0, mockDate0, mockDate0, integer0, mockDate0, integer0, "5XeK3", mockDate0, mockDate0);
      linkedList0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderRepository0).findOutForDeliveryOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllOutForDeliveryOrderForARestaurant("e0[Y");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      Integer integer0 = new Integer((-915));
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantCodOrder) null).when(restaurantCodOrderRepository0).findIfCodOrderExists(anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findOutForDeliveryOrdersCountForARestaurant(anyString() , anyInt());
      doReturn((RestaurantOrder) null).when(restaurantOrderRepository0).findRestaurantOrderDetails(anyInt());
      doReturn((Double) null).when(restaurantOrderRepository0).findRevenueThisMonth(anyString() , anyInt() , anyInt());
      doReturn((Double) null).when(restaurantOrderRepository0).findRevenueToday(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer1 = new Integer((-1293));
      restaurantOrderServiceImpl0.updateIsOrderStartedPreparingByRestaurantFlagForOrder(integer1, integer1);
      Integer integer2 = new Integer(15);
      restaurantOrderServiceImpl0.getOrderDetails(integer2);
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.getIsOrderDelivered();
      Integer.max(15, 15);
      restaurantOrderServiceImpl0.updateIsOrderStartedPreparingByRestaurantFlagForOrder((Integer) null, (Integer) null);
      restaurantOrderServiceImpl0.updateIsOrderStartedPreparingByRestaurantFlagForOrder((Integer) null, (Integer) null);
      Integer integer3 = new Integer((-1049));
      restaurantOrderInputPayload0.getIsOrderStartedPreparingByRestaurant();
      restaurantOrderServiceImpl0.updatePaymentConfirmedFlagForOrder(integer3, (Integer) null);
      restaurantOrderServiceImpl0.getRevenueThisMonthForARestaurant("");
      restaurantOrderServiceImpl0.getAllOuForDeliveryOrderCountForARestaurant("");
      restaurantOrderServiceImpl0.getRevenueForARestaurant("");
      Integer integer4 = new Integer((-1049));
      Integer integer5 = new Integer(0);
      restaurantOrderServiceImpl0.updateDeliveredFlagForOrder(integer4, integer5);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant("", "", "7z/#&D8K^Lh2Agf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long(370L);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findOutForDeliveryOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllOuForDeliveryOrderCountForARestaurant("i}0+N&ASr*sxhQZ");
      assertEquals(370L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long((-1L));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null, long0).when(restaurantOrderRepository0).findOutForDeliveryOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      restaurantOrderServiceImpl0.getAllOuForDeliveryOrderCountForARestaurant("z");
      Long long1 = restaurantOrderServiceImpl0.getAllOuForDeliveryOrderCountForARestaurant("cu<%\"K@bc");
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      LinkedList<RestaurantOrder> linkedList0 = new LinkedList<RestaurantOrder>();
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderRepository0).findOrdersInFoodPreparationForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllOrdersInFoodPreparationForARestaurant(" could not be parsed.");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Stack<RestaurantOrder> stack0 = new Stack<RestaurantOrder>();
      Integer integer0 = new Integer(834);
      Double double0 = new Double(834);
      MockDate mockDate0 = new MockDate(79, 79, 31, (-142), 834, (-1));
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "cod", integer0, double0, double0, double0, "cod", "yyyyMMdd", "cod", "T/ghzrRG3@x<p^L3pA", "ewKK$?EtTyrmz5EN", integer0, "f4h", integer0, integer0, (Integer) null, integer0, "yyyyMMdd", double0, double0, integer0, integer0, integer0, mockDate0, mockDate0, mockDate0, (Date) null, mockDate0, integer0, mockDate0, integer0, "", (Date) null, (Date) null);
      stack0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrderRepository0).findOrdersInFoodPreparationForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllOrdersInFoodPreparationForARestaurant("");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findOrdersInFoodPreparationCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long0 = restaurantOrderServiceImpl0.getAllOrderInPreparationCountForARestaurant("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long(1L);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findOrdersInFoodPreparationCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllOrderInPreparationCountForARestaurant("");
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long((-1L));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findOrdersInFoodPreparationCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllOrderInPreparationCountForARestaurant("$");
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      Integer integer0 = new Integer(534);
      Double double0 = new Double(0.0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      ArrayList<RestaurantOrder> arrayList0 = new ArrayList<RestaurantOrder>();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "", integer0, double0, double0, double0, "", "", "vRaIaS4&U3FFlZ{]*{6", "f4h", "yyyyMMdd", integer0, "f4h", integer0, (Integer) null, integer0, integer0, "", (Double) null, double0, integer0, integer0, integer0, date0, date0, date0, date0, date0, integer0, date0, integer0, ",", date0, date0);
      arrayList0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantOrderRepository0).findFoodReadyOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllFoodReadyOrderForARestaurant("keyFunction is marked non-null but is null");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long(1L);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findFoodReadyOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllFoodReadyOrderCountForARestaurant("");
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long((-1L));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findFoodReadyOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllFoodReadyOrderCountForARestaurant(":");
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Vector<RestaurantOrder> vector0 = new Vector<RestaurantOrder>();
      Integer integer0 = new Integer(1507);
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = restaurantOrderInputPayload0.getOrderTotal();
      MockDate mockDate0 = new MockDate(0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "-", integer0, (Double) null, double0, double0, "-", "-", "-", "-", "", integer0, "BK,V'7N7kmQN4\"", integer0, integer0, integer0, integer0, "-", (Double) null, double0, integer0, (Integer) null, (Integer) null, mockDate0, mockDate0, mockDate0, mockDate0, mockDate0, integer0, mockDate0, integer0, "", mockDate0, mockDate0);
      vector0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderRepository0).findDeliveredOrdersForARestaurant(anyString() , anyInt() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllDeliveredOrderForARestaurant("9", "9", "9");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      ArrayList<RestaurantOrder> arrayList0 = new ArrayList<RestaurantOrder>();
      Integer integer0 = new Integer((-4232));
      Double double0 = Double.valueOf((double) 1L);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "Orders must not be null!", integer0, double0, double0, double0, "Orders must not be null!", "", "w!Y[{Bd\"PChC?<", "Orders must not be null!", "Orders must not be null!", (Integer) null, "", (Integer) null, integer0, integer0, integer0, "", double0, double0, (Integer) null, (Integer) null, integer0, (Date) null, (Date) null, (Date) null, (Date) null, (Date) null, integer0, (Date) null, (Integer) null, "Orders must not be null!", (Date) null, (Date) null);
      arrayList0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantOrderRepository0).findDeliveredOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllDeliveredOrderForARestaurant("7yuLdHSkX}");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findDeliveredOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long0 = restaurantOrderServiceImpl0.getAllDeliveredOrderCountForARestaurant((String) null);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long(1L);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findDeliveredOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllDeliveredOrderCountForARestaurant("");
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long((-1553L));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findDeliveredOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllDeliveredOrderCountForARestaurant("FZFjfh?P");
      assertEquals((-1553L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrder restaurantCodOrder0 = new RestaurantCodOrder();
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantCodOrder0).when(restaurantCodOrderRepository0).findIfCodOrderExists(anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Vector<RestaurantOrder> vector0 = new Vector<RestaurantOrder>();
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantOrderRepository0).findCancelledOrdersForARestaurant(anyString() , anyInt() , anyInt());
      doReturn(vector0).when(restaurantOrderRepository0).findDeliveredOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer(4793);
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.getIsOrderStartedPreparingByRestaurant();
      Integer.getInteger("", (Integer) null);
      restaurantOrderServiceImpl0.updateDeliveredFlagForOrder(integer0, integer0);
      restaurantOrderServiceImpl0.getAllDeliveredOrderForARestaurant("");
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant("d((a3H'*#75", "2", "2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      Integer integer0 = new Integer(534);
      Double double0 = new Double(0.0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      ArrayList<RestaurantOrder> arrayList0 = new ArrayList<RestaurantOrder>();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "", integer0, double0, double0, double0, "", "", "vRaIaS4&U3FFlZ{]*{6", "f4h", "yyyyMMdd", integer0, "f4h", integer0, (Integer) null, integer0, integer0, "", (Double) null, double0, integer0, integer0, integer0, date0, date0, date0, date0, date0, integer0, date0, integer0, ",", date0, date0);
      arrayList0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantOrderRepository0).findCancelledOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant("b'9<{}cvvxR7=R:>`N1");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findAcceptedOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long0 = restaurantOrderServiceImpl0.getAllAcceptedOrderCountForARestaurant("rF{$");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findFoodReadyOrdersCountForARestaurant(anyString() , anyInt());
      doReturn((List) null).when(restaurantOrderRepository0).findQueuedOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer(5);
      restaurantOrderServiceImpl0.updateCancelledByRestaurantFlagForOrder(integer0, "Date: ");
      restaurantOrderServiceImpl0.getAllFoodReadyOrderCountForARestaurant("");
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllQueuedOrderForARestaurant("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long(1L);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findAcceptedOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllAcceptedOrderCountForARestaurant("Page size must not be less than one!");
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.updateIsOrderStartedPreparingByRestaurantFlagForOrder((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getRevenueThisMonthForARestaurant("COD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/1/14 12:00 AM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getRevenueThisMonthForARestaurant("l~u{-d.|!ig)N}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getRevenueForARestaurant("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getHighestOrderForARestaurant("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getHighestOrderForARestaurant("VeHK50+i{6O)yZU?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Locale locale0 = Locale.JAPAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getCancelledOrderCountForARestaurant("?ne3m:$,p9rCjAnFt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getCancelledOrderCountForARestaurant("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllQueuedOrderForARestaurant("\u0001y7vy`#0gh#;^9Jw}G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOuForDeliveryOrderCountForARestaurant("2C[><Aw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      restaurantOrderServiceImpl0.sdf = null;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOuForDeliveryOrderCountForARestaurant("org.springframework.data.mapping.PropertyPath");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOrdersInFoodPreparationForARestaurant("%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOrdersForARestaurant("", integer0, integer0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property must not null or empty!
         //
         verifyException("org.springframework.data.domain.Sort$Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOrderInPreparationCountForARestaurant("}F~)N.|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOrderInPreparationCountForARestaurant("COD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllFoodReadyOrderForARestaurant(")");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantOrderRepository0).findFoodReadyOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllFoodReadyOrderForARestaurant("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllFoodReadyOrderCountForARestaurant("org.springframework.core.annotation.MergedAnnotationPredicates$UniquePredicate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllDeliveredOrderForARestaurant((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllDeliveredOrderForARestaurant("7yuLdHSkX}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllDeliveredOrderCountForARestaurant("uF<{s0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Locale locale0 = Locale.KOREAN;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("7\"?", dateFormatSymbols0);
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7\"?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantOrderRepository0).findCancelledOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      restaurantOrderServiceImpl0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllAcceptedOrderCountForARestaurant("<C-mb`#{6)(~81M8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2/14/14 8:21 PM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllAcceptedOrderCountForARestaurant("3b>/]u.}V2aGas");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Vector<RestaurantOrder> vector0 = new Vector<RestaurantOrder>();
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderRepository0).findAcceptedOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllAcceptedOrderForARestaurant("2'eX<.PX!G}");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      Stack<Item> stack0 = new Stack<Item>();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      LinkedList<RestaurantOrder> linkedList0 = new LinkedList<RestaurantOrder>();
      Integer integer0 = new Integer((-124019115));
      Double double0 = new Double((-124019115));
      MockDate mockDate0 = new MockDate((-839L));
      RestaurantOrder restaurantOrder0 = new RestaurantOrder(integer0, "5XeK3", integer0, double0, double0, double0, "5XeK3", "5XeK3", "com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", "cod", "5XeK3", integer0, "5XeK3", integer0, integer0, integer0, integer0, "5XeK3", (Double) null, double0, integer0, integer0, integer0, mockDate0, mockDate0, mockDate0, mockDate0, mockDate0, integer0, mockDate0, integer0, "5XeK3", mockDate0, mockDate0);
      linkedList0.add(restaurantOrder0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderRepository0).findAcceptedOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      List<RestaurantOrderOutputPayload> list0 = restaurantOrderServiceImpl0.getAllAcceptedOrderForARestaurant("e0[Y");
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      try { 
        restaurantOrderServiceImpl0.getAllAcceptedOrderForARestaurant((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Restaurant-Tenant-Id can not be NULL
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      Long long0 = new Long((-2664));
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderRepository0).findAcceptedOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long1 = restaurantOrderServiceImpl0.getAllAcceptedOrderCountForARestaurant("<C-mb`#{6)(~81M8");
      assertEquals((-2664L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantOrderRepository0).findOrdersInFoodPreparationForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOrdersInFoodPreparationForARestaurant("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findDeliveredOrdersCountForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Long long0 = restaurantOrderServiceImpl0.getAllDeliveredOrderCountForARestaurant("T2IWQ.(kwl^3X$x|");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      Integer integer0 = new Integer((-2664));
      restaurantOrderServiceImpl0.updateCancelledByCustomerFlagForOrder(integer0, "<C-mb`#{6)(~81M8");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantOrderRepository0).findDeliveredOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllDeliveredOrderForARestaurant("Value extractor must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      Integer integer0 = new Integer((-124019115));
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderRepository0).findCancelledOrdersCountForARestaurant(anyString() , anyInt());
      doReturn((List) null, (List) null).when(restaurantOrderRepository0).findCancelledOrdersForARestaurant(anyString() , anyInt());
      doReturn((Double) null).when(restaurantOrderRepository0).findHighestOrderValueToday(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      restaurantOrderServiceImpl0.getCancelledOrderCountForARestaurant("|,aAvw");
      String string0 = "Context path must begin with '/'";
      restaurantOrderServiceImpl0.getHighestOrderForARestaurant("Context path must begin with '/'");
      restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant((String) null);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllCancelledOrderForARestaurant("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      RestaurantOrderServiceImpl restaurantOrderServiceImpl0 = new RestaurantOrderServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantCodOrderRepository restaurantCodOrderRepository0 = mock(RestaurantCodOrderRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantCodOrderRepository", (Object) restaurantCodOrderRepository0);
      RestaurantOrderRepository restaurantOrderRepository0 = mock(RestaurantOrderRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantOrderRepository0).findOutForDeliveryOrdersForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class, "restaurantOrderRepository", (Object) restaurantOrderRepository0);
      Injector.validateBean(restaurantOrderServiceImpl0, (Class<?>) RestaurantOrderServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrderServiceImpl0.getAllOutForDeliveryOrderForARestaurant("Exception thrown providing input to the parser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrderServiceImpl", e);
      }
  }
}
