/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 08:57:22 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantInfo;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantMenu;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantMenuCustomization;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantOrder;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantPaymentOptions;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.CartMenu;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.Item;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.OrderInvoice;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantDetails;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuOutputPayload;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuWithCustomization;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderInputPayload;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderOutputPayload;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.enums.RestaurantPaymentMode;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.InvoiceGenerationService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.RestaurantMenuCategoryService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.RestaurantOrchestratorService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.RestaurantOrderService;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestaurantOrchestratorController_ESTest extends RestaurantOrchestratorController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List<RestaurantOrderOutputPayload>) null).when(restaurantOrderService0).getAllDeliveredOrderForARestaurant(anyString() , anyString() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllDeliveredRestaurantOrderForARestaurantForTheDateRange("T\"9Ba9epsF&/o)j", "mC~3UU", "C7^GhO");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsCancelledByCustomer("Mu.mb)s", "");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsCancelledByRestaurant("594", "Exception:{} occurred while creating restaurant-info for restaurant:{}");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsDelivered("594", "nUUFl!H>!gxW#'G\"", "nUUFl!H>!gxW#'G\"");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsStartedFoodPreparationByRestaurant("7", "");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsAcceptedByRestaurant("2", "com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      Integer integer0 = new Integer(1459);
      RestaurantPaymentMode restaurantPaymentMode0 = RestaurantPaymentMode.PHONE_PAY;
      RestaurantPaymentOptions restaurantPaymentOptions0 = new RestaurantPaymentOptions(integer0, "Mu.mb)s", restaurantPaymentMode0, "W_p?F6.cm}m*aO");
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantPaymentOptions0).when(restaurantOrchestratorService0).addRestaurantPaymentOptions(any(com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantPaymentOptions.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantPaymentOptions restaurantPaymentOptions1 = new RestaurantPaymentOptions();
      ResponseEntity<RestaurantPaymentOptions> responseEntity0 = restaurantOrchestratorController0.createRestaurantPaymentOptionsForARestaurant(restaurantPaymentOptions1);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantInfo restaurantInfo0 = new RestaurantInfo();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantInfo0).when(restaurantOrchestratorService0).addRestaurantInfoWithLogin(any(com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantInfo.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantInfo restaurantInfo1 = new RestaurantInfo();
      ResponseEntity<RestaurantInfo> responseEntity0 = restaurantOrchestratorController0.createRestaurantInfoForARestaurant(restaurantInfo1);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsFoodReadyByRestaurant("2", "Exception:{} occurred while creattng resta4rant-payment-options for restaurant:{}");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsDelivered((String) null, ":]f{58H");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsDelivered("2", "Exception:{} occurred while fetching out-for-delivery-order list for restaurant:{}");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsCancelledByRestaurant("", "0`avd+C$");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List<RestaurantOrderOutputPayload>) null).when(restaurantOrderService0).getAllOrdersInFoodPreparationForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllStartedFoodPreparationRestaurantOrderForARestaurant("\"#,!q;;: V)]VnC");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantOrderService0).getAllOutForDeliveryOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllOutForDeliveryRestaurantOrderForARestaurant("com.google.gson.JsonParseException");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List<RestaurantOrderOutputPayload>) null).when(restaurantOrderService0).getAllFoodReadyOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllFoodReadyRestaurantOrderForARestaurant("");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List<RestaurantOrderOutputPayload>) null).when(restaurantOrderService0).getAllDeliveredOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllDeliveredRestaurantOrderForARestaurant("");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List<RestaurantOrderOutputPayload>) null).when(restaurantOrderService0).getAllCancelledOrderForARestaurant(anyString() , anyString() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllCancelledRestaurantOrderForARestaurant("4", "", "");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List<RestaurantOrderOutputPayload>) null).when(restaurantOrderService0).getAllCancelledOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllCancelledRestaurantOrderForARestaurant("Exception:{} occurred while fetching food-in-preparation-order count for restaurant:{}");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getRestaurantRevenueForARestaurantToday("OFq");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getRestaurantRevenueForARestaurantThisMonth("Exception:{} occurred while marking out-of-stock for restaurant-menu:{} for restaurant:{}");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      ResponseEntity<RestaurantDetails> responseEntity0 = restaurantOrchestratorController0.getRestaurantDetailsForARestaurant("");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getHighestRestaurantOrderForARestaurantToday("Exception:{} occurred while marking in-stock for restaurant-menu:{} for restaurant:{}");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<OrderInvoice> responseEntity0 = restaurantOrchestratorController0.generateInvoiceForARestaurantOrderForARestaurant("");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      ResponseEntity<RestaurantOrderOutputPayload> responseEntity0 = restaurantOrchestratorController0.createRestaurantOrderOfARestaurant(restaurantOrderInputPayload0);
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      Integer integer0 = Integer.getInteger((String) null, (Integer) null);
      Double double0 = new Double(792.29338872263);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload((Integer) null, "_(7@H*;9nmHZ3d", "Exception:{} occurred while fetching restaurant-menu-and-customizations for restaurant-menu-id:{}", "Exception:{} occurred while fetching restaurant-menu-and-customizations for restaurant-menu-id:{}", "", "http://13.233.89.218:8084/api/cache/login/status", (String) null, double0, double0, double0, "wne!ij:XZt'{ch", integer0);
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.createRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllOutForDeliveryRestaurantOrderForARestaurant("");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllFoodReadyRestaurantOrderForARestaurant("11dV &]");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllFoodInPreparationRestaurantOrderForARestaurant((String) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllDeliveredRestaurantOrderForARestaurant("2g!)}!M=vW]gM");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      restaurantOrchestratorController0.countAllCancelledRestaurantOrderForARestaurant((String) null);
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllAcceptedRestaurantOrderForARestaurant("MMM d, yyyy");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      Vector<RestaurantMenuWithCustomization> vector0 = new Vector<RestaurantMenuWithCustomization>();
      Stack<RestaurantPaymentOptions> stack0 = new Stack<RestaurantPaymentOptions>();
      RestaurantDetails restaurantDetails0 = new RestaurantDetails("Exception:{} occurred while marking out-for-delivery for order:{}", "Exception:{} occurred while marking out-for-delivery for order:{}", "Exception:{} occurred while marking out-for-delivery for order:{}", "Exception:{} occurred while marking out-for-delivery for order:{}", ";f`;+a=82KVUBg3!~nR", "Exception:{} occurred while marking out-for-delivery for order:{}", "Exception:{} occurred while marking out-for-delivery for order:{}", ";f`;+a=82KVUBg3!~nR", (String) null, "w*Z", "w*Z", "N[x.wz0D:|ig#U/n9", "E.YFYx`ig$n0q;", "E.YFYx`ig$n0q;", "-^v<\"H^vjf$M[W!i", "wHh6(A{iO.rf", "Exception:{} occurred while marking out-for-delivery for order:{}", "com.google.gson.FieldNamingPolicy", vector0, stack0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Item>) null).when(restaurantOrchestratorService0).convertRestaurantMenuToCartMenu(anyList());
      doReturn(restaurantDetails0).when(restaurantOrchestratorService0).getRestaurantDetailsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<CartMenu> responseEntity0 = restaurantOrchestratorController0.convertRestaurantMenuToCartRestaurantMenu("b\"3CaU7");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsOutForDelivery("594", "594");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenu restaurantMenu0 = new RestaurantMenu();
      LinkedList<RestaurantMenuCustomization> linkedList0 = new LinkedList<RestaurantMenuCustomization>();
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization(restaurantMenu0, linkedList0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuWithCustomizationForAMenuId(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<RestaurantMenuOutputPayload> responseEntity0 = restaurantOrchestratorController0.getRestaurantMenuWithCustomization("");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorController0.setRestaurantMenuOfARestaurantToDeactive("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorController0.resetRestaurantMenuOfARestaurantToActive("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorController0.createRestaurantPaymentOptionsForARestaurant((RestaurantPaymentOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorController0.createRestaurantOrderOfARestaurant((RestaurantOrderInputPayload) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorController0.createRestaurantMenuOfARestaurant((RestaurantMenuInputPayload) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantInfo restaurantInfo0 = new RestaurantInfo();
      // Undeclared exception!
      try { 
        restaurantOrchestratorController0.createRestaurantInfoForARestaurant(restaurantInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      Double double0 = new Double((-2475));
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderService0).getHighestOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getHighestRestaurantOrderForARestaurantToday("2");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Long long0 = new Long((-4389L));
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderService0).getAllOuForDeliveryOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllOutForDeliveryRestaurantOrderForARestaurant("\"#,!q;;: V)]VnC");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Vector<RestaurantOrderOutputPayload> vector0 = new Vector<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderService0).getAllQueuedOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllQueuedRestaurantOrderForARestaurant((String) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Vector<RestaurantOrderOutputPayload> vector0 = new Vector<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderService0).getAllAcceptedOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllAcceptedRestaurantOrderForARestaurant("Feature ");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      doReturn((OrderInvoice) null).when(invoiceGenerationService0).generateInvoice(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<OrderInvoice> responseEntity0 = restaurantOrchestratorController0.generateInvoiceForARestaurantOrderForARestaurant("2");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      Integer integer0 = new Integer((-2475));
      LinkedList<Item> linkedList0 = new LinkedList<Item>();
      Double double0 = new Double((-2475));
      OrderInvoice orderInvoice0 = new OrderInvoice(integer0, "Exception:{} occurred while fetching cancelled-order list for restaurant:{}", "Exception:{} occurred while fetching cancelled-order list for restaurant:{}", (String) null, "Exception:{} occurred while fetching cancelled-order list for restaurant:{}", (String) null, linkedList0, double0, double0, double0, double0, double0, (String) null, "Exception:{} occurred while fetching cancelled-order list for restaurant:{}", "Exception:{} occurred while fetching cancelled-order list for restaurant:{}", "OB.{$7!=");
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      doReturn(orderInvoice0).when(invoiceGenerationService0).generateInvoice(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<OrderInvoice> responseEntity0 = restaurantOrchestratorController0.generateInvoiceForARestaurantOrderForARestaurant("2");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(restaurantOrderService0).getRevenueThisMonthForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getRestaurantRevenueForARestaurantThisMonth("~");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Double double0 = new Double((-1.0));
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderService0).getRevenueThisMonthForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getRestaurantRevenueForARestaurantThisMonth("qe]<Y==UJ&f[cqvQ");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(restaurantOrderService0).getRevenueForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getRestaurantRevenueForARestaurantToday("-(p@");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      Double double0 = new Double((-2475));
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(restaurantOrderService0).getRevenueForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getRestaurantRevenueForARestaurantToday("Exception:{} occurred while creattng resta4rant-payment-options for restaurant:{}");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(restaurantOrderService0).getHighestOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.getHighestRestaurantOrderForARestaurantToday("");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderService0).getCancelledOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllCancelledRestaurantOrderForARestaurant("$p#`l6]nYW]Eih");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Long long0 = new Long(0L);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderService0).getCancelledOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllCancelledRestaurantOrderForARestaurant(":]f{58H");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderService0).getAllDeliveredOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllDeliveredRestaurantOrderForARestaurant("Exception:{} occurred while creating restaurant-payment-options for restaurant:{}");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Long long0 = new Long(0L);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderService0).getAllDeliveredOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllDeliveredRestaurantOrderForARestaurant("'");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderService0).getAllOuForDeliveryOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllOutForDeliveryRestaurantOrderForARestaurant("xrjY-!VqeS]>PO{-]");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderService0).getAllFoodReadyOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllFoodReadyRestaurantOrderForARestaurant("Nlc-D/rmsW%,}D");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Long long0 = new Long((-1L));
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderService0).getAllFoodReadyOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllFoodReadyRestaurantOrderForARestaurant(";t!(Y+N*");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderService0).getAllOrderInPreparationCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllFoodInPreparationRestaurantOrderForARestaurant("y=Xf`j4ViX;");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Long long0 = new Long(0L);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(restaurantOrderService0).getAllOrderInPreparationCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllFoodInPreparationRestaurantOrderForARestaurant("ZqVDv+<Rx");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderService0).getAllAcceptedOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllAcceptedRestaurantOrderForARestaurant("");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(restaurantOrderService0).getAllAcceptedOrderCountForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.countAllAcceptedRestaurantOrderForARestaurant((String) null);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantOrderService0).getAllQueuedOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllQueuedRestaurantOrderForARestaurant("W_p?F6.cm}m*aO");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Vector<RestaurantOrderOutputPayload> vector0 = new Vector<RestaurantOrderOutputPayload>();
      vector0.add((RestaurantOrderOutputPayload) null);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderService0).getAllQueuedOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllQueuedRestaurantOrderForARestaurant("Y_Ufm$");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Vector<RestaurantOrderOutputPayload> vector0 = new Vector<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderService0).getAllCancelledOrderForARestaurant(anyString() , anyString() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllCancelledRestaurantOrderForARestaurant("Vicf", "Vicf", "");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      LinkedList<RestaurantOrderOutputPayload> linkedList0 = new LinkedList<RestaurantOrderOutputPayload>();
      RestaurantOrderOutputPayload restaurantOrderOutputPayload0 = new RestaurantOrderOutputPayload();
      linkedList0.add(restaurantOrderOutputPayload0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderService0).getAllCancelledOrderForARestaurant(anyString() , anyString() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllCancelledRestaurantOrderForARestaurant("594", "594", "Exception:{} occurred while fetching today's revenue for restaurant:{}");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      LinkedList<RestaurantOrderOutputPayload> linkedList0 = new LinkedList<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderService0).getAllCancelledOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllCancelledRestaurantOrderForARestaurant("BqV$J_ yU4|PPoNF/d");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Stack<RestaurantOrderOutputPayload> stack0 = new Stack<RestaurantOrderOutputPayload>();
      stack0.add((RestaurantOrderOutputPayload) null);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrderService0).getAllCancelledOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllCancelledRestaurantOrderForARestaurant("ro7");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantOrderService0).getAllDeliveredOrderForARestaurant(anyString() , anyString() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllDeliveredRestaurantOrderForARestaurantForTheDateRange((String) null, "irCSo3mn$%", (String) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Stack<RestaurantOrderOutputPayload> stack0 = new Stack<RestaurantOrderOutputPayload>();
      stack0.add((RestaurantOrderOutputPayload) null);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrderService0).getAllDeliveredOrderForARestaurant(anyString() , anyString() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllDeliveredRestaurantOrderForARestaurantForTheDateRange("C7^GhO", "mC~3UU", "C7^GhO");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Stack<RestaurantOrderOutputPayload> stack0 = new Stack<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrderService0).getAllDeliveredOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllDeliveredRestaurantOrderForARestaurant("p`avd+C$");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Stack<RestaurantOrderOutputPayload> stack0 = new Stack<RestaurantOrderOutputPayload>();
      RestaurantOrderOutputPayload restaurantOrderOutputPayload0 = new RestaurantOrderOutputPayload();
      stack0.add(restaurantOrderOutputPayload0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrderService0).getAllDeliveredOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllDeliveredRestaurantOrderForARestaurant("F2O");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Vector<RestaurantOrderOutputPayload> vector0 = new Vector<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderService0).getAllOutForDeliveryOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllOutForDeliveryRestaurantOrderForARestaurant("Nlc-D/rmsW%,}D");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      LinkedList<RestaurantOrderOutputPayload> linkedList0 = new LinkedList<RestaurantOrderOutputPayload>();
      RestaurantOrderOutputPayload restaurantOrderOutputPayload0 = new RestaurantOrderOutputPayload();
      linkedList0.add(restaurantOrderOutputPayload0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderService0).getAllOutForDeliveryOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllOutForDeliveryRestaurantOrderForARestaurant("6463|jww'hfHwv");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Vector<RestaurantOrderOutputPayload> vector0 = new Vector<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantOrderService0).getAllFoodReadyOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllFoodReadyRestaurantOrderForARestaurant("Nlc-D/rmsW%,}D");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      LinkedList<RestaurantOrderOutputPayload> linkedList0 = new LinkedList<RestaurantOrderOutputPayload>();
      RestaurantOrderOutputPayload restaurantOrderOutputPayload0 = new RestaurantOrderOutputPayload();
      linkedList0.add(restaurantOrderOutputPayload0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderService0).getAllFoodReadyOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllFoodReadyRestaurantOrderForARestaurant("594");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      LinkedList<RestaurantOrderOutputPayload> linkedList0 = new LinkedList<RestaurantOrderOutputPayload>();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderService0).getAllOrdersInFoodPreparationForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllStartedFoodPreparationRestaurantOrderForARestaurant("594");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      LinkedList<RestaurantOrderOutputPayload> linkedList0 = new LinkedList<RestaurantOrderOutputPayload>();
      RestaurantOrderOutputPayload restaurantOrderOutputPayload0 = new RestaurantOrderOutputPayload();
      linkedList0.add(restaurantOrderOutputPayload0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantOrderService0).getAllOrdersInFoodPreparationForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = (ResponseEntity<List<RestaurantOrderOutputPayload>>)restaurantOrchestratorController0.listAllStartedFoodPreparationRestaurantOrderForARestaurant("6463|jww'hfHwv");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Stack<RestaurantOrderOutputPayload> stack0 = new Stack<RestaurantOrderOutputPayload>();
      RestaurantOrderOutputPayload restaurantOrderOutputPayload0 = new RestaurantOrderOutputPayload();
      stack0.add(restaurantOrderOutputPayload0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrderService0).getAllAcceptedOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllAcceptedRestaurantOrderForARestaurant(":`yyJH\"4ClwU4");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantOrderService0).getAllAcceptedOrderForARestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllAcceptedRestaurantOrderForARestaurant("Exception: {} occurred while updating delivered-flag for order: {} for delivered-flag value: {}");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<List<RestaurantOrderOutputPayload>> responseEntity0 = restaurantOrchestratorController0.listAllAcceptedRestaurantOrderForARestaurant((String) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0, restaurantOrder0, (RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsAcceptedByRestaurant("2", "2");
      ResponseEntity<String> responseEntity1 = restaurantOrchestratorController0.updateRestaurantOrderAsFoodReadyByRestaurant("2", "2");
      assertTrue(responseEntity1.equals((Object)responseEntity0));
      
      ResponseEntity<String> responseEntity2 = restaurantOrchestratorController0.updateRestaurantOrderAsCancelledByCustomer("2", "2");
      assertFalse(responseEntity2.hasBody());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsCancelledByCustomer("2", "Exception:{} occurred while fetching out-for-delivery-order list for restaurant:{}");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsCancelledByRestaurant("6", "6");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsDelivered("1", "-(p@", "-(p@");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsDelivered("2", "2", "");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsDelivered("3", "");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsDelivered("594", "594");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsOutForDelivery("1", "");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsOutForDelivery("333", "");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsFoodReadyByRestaurant("4", "ZqVDv+<Rx");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0, restaurantOrder0, (RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsAcceptedByRestaurant("2", "2");
      ResponseEntity<String> responseEntity1 = restaurantOrchestratorController0.updateRestaurantOrderAsFoodReadyByRestaurant("2", "2");
      assertTrue(responseEntity1.equals((Object)responseEntity0));
      
      ResponseEntity<String> responseEntity2 = restaurantOrchestratorController0.updateRestaurantOrderAsStartedFoodPreparationByRestaurant("2", "2");
      assertEquals(204, responseEntity2.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsStartedFoodPreparationByRestaurant("2", "2");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantOrder) null).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.updateRestaurantOrderAsAcceptedByRestaurant("2", "com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrder restaurantOrder0 = new RestaurantOrder();
      Vector<Item> vector0 = new Vector<Item>();
      RestaurantOrderOutputPayload restaurantOrderOutputPayload0 = new RestaurantOrderOutputPayload(restaurantOrder0, vector0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrderOutputPayload0).when(restaurantOrderService0).createRestaurantOrder(any(com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderInputPayload.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      ResponseEntity<RestaurantOrderOutputPayload> responseEntity0 = restaurantOrchestratorController0.createRestaurantOrderOfARestaurant(restaurantOrderInputPayload0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantMenuWithCustomization) null).when(restaurantOrchestratorService0).getRestaurantMenuWithCustomizationForAMenuId(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<RestaurantMenuOutputPayload> responseEntity0 = restaurantOrchestratorController0.getRestaurantMenuWithCustomization("value instantiator");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuWithCustomizationForAMenuId(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<RestaurantMenuOutputPayload> responseEntity0 = restaurantOrchestratorController0.getRestaurantMenuWithCustomization(" =78BqVW_'d7Q`>");
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantDetails restaurantDetails0 = new RestaurantDetails();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantDetails0).when(restaurantOrchestratorService0).getRestaurantDetailsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<RestaurantDetails> responseEntity0 = restaurantOrchestratorController0.getRestaurantDetailsForARestaurant((String) null);
      //  // Unstable assertion: assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantDetails restaurantDetails0 = new RestaurantDetails();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantDetails0).when(restaurantOrchestratorService0).getRestaurantDetailsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<RestaurantDetails> responseEntity0 = restaurantOrchestratorController0.getRestaurantDetailsForARestaurant("-(p@");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuWithCustomizationForAMenuId(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.setRestaurantMenuOfARestaurantToDeactive("");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantMenuWithCustomization) null).when(restaurantOrchestratorService0).getRestaurantMenuWithCustomizationForAMenuId(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.setRestaurantMenuOfARestaurantToDeactive("'");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.setRestaurantMenuOfARestaurantToDeactive((String) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantMenuWithCustomization) null).when(restaurantOrchestratorService0).getRestaurantMenuWithCustomizationForAMenuId(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.resetRestaurantMenuOfARestaurantToActive("Exception:{} occurred while marking out-for-delivery for order:{}");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuWithCustomizationForAMenuId(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<String> responseEntity0 = restaurantOrchestratorController0.resetRestaurantMenuOfARestaurantToActive(" with 1 type parameter: class expects ");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenu restaurantMenu0 = new RestaurantMenu();
      LinkedList<RestaurantMenuCustomization> linkedList0 = new LinkedList<RestaurantMenuCustomization>();
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization(restaurantMenu0, linkedList0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuForMenuNameAndTenant(anyInt() , anyString());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).updateRestaurantMenu(anyInt() , any(com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Double double0 = new Double(456.44486);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      Integer integer0 = new Integer((-2669));
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "", "", "", "v[r{&Je1P;^f<Nf", "v[r{&Je1P;^f<Nf", "", double0, double0, double0, "v[r{&Je1P;^f<Nf", integer0);
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.updateRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenu restaurantMenu0 = new RestaurantMenu();
      LinkedList<RestaurantMenuCustomization> linkedList0 = new LinkedList<RestaurantMenuCustomization>();
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization(restaurantMenu0, linkedList0);
      Integer integer0 = new Integer(2549);
      Double double0 = new Double(2549);
      RestaurantMenu restaurantMenu1 = new RestaurantMenu(integer0, "kotlin.Metadata", "kotlin.Metadata", "pQ0L\"K", "kotlin.Metadata", "groupId", "", double0, double0, double0, (Double) null);
      restaurantMenuWithCustomization0.setRestaurantMenu(restaurantMenu1);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuForMenuNameAndTenant(anyInt() , anyString());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).updateRestaurantMenu(anyInt() , any(com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "", "", "", "v[r{&Je1P;^f<Nf", "v[r{&Je1P;^f<Nf", "", double0, double0, double0, "v[r{&Je1P;^f<Nf", integer0);
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.updateRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).addRestaurantMenu(any(com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload.class));
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuForMenuNameAndTenant(anyInt() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload();
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.updateRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      //  // Unstable assertion: assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantMenuWithCustomization) null).when(restaurantOrchestratorService0).addRestaurantMenu(any(com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload.class));
      doReturn((RestaurantMenuWithCustomization) null).when(restaurantOrchestratorService0).getRestaurantMenuForMenuNameAndTenant(anyInt() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload();
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.updateRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization();
      Integer integer0 = new Integer(651);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).getRestaurantMenuForMenuNameAndTenant(anyInt() , anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      Double double0 = new Double(651);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "", "", "", ":G}~VcY&$ATQ+*>q", ":G}~VcY&$ATQ+*>q", "", double0, double0, double0, ";t!(Y+N*", integer0);
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.updateRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantMenuWithCustomization) null).when(restaurantOrchestratorService0).addRestaurantMenu(any(com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload();
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.createRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenuWithCustomization0).when(restaurantOrchestratorService0).addRestaurantMenu(any(com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload();
      ResponseEntity<RestaurantMenuWithCustomization> responseEntity0 = restaurantOrchestratorController0.createRestaurantMenuOfARestaurant(restaurantMenuInputPayload0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantInfo) null).when(restaurantOrchestratorService0).addRestaurantInfoWithLogin(any(com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantInfo.class));
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      RestaurantInfo restaurantInfo0 = new RestaurantInfo();
      ResponseEntity<RestaurantInfo> responseEntity0 = restaurantOrchestratorController0.createRestaurantInfoForARestaurant(restaurantInfo0);
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantDetails) null).when(restaurantOrchestratorService0).getRestaurantDetailsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<CartMenu> responseEntity0 = restaurantOrchestratorController0.convertRestaurantMenuToCartRestaurantMenu("");
      assertEquals(204, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantDetails restaurantDetails0 = new RestaurantDetails();
      Stack<Item> stack0 = new Stack<Item>();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantOrchestratorService0).convertRestaurantMenuToCartMenu(anyList());
      doReturn(restaurantDetails0).when(restaurantOrchestratorService0).getRestaurantDetailsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      ResponseEntity<CartMenu> responseEntity0 = restaurantOrchestratorController0.convertRestaurantMenuToCartRestaurantMenu("not q valid representation (error: %s)");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RestaurantOrchestratorController restaurantOrchestratorController0 = new RestaurantOrchestratorController();
      InvoiceGenerationService invoiceGenerationService0 = mock(InvoiceGenerationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "invoiceGenerationService", (Object) invoiceGenerationService0);
      RestaurantMenuCategoryService restaurantMenuCategoryService0 = mock(RestaurantMenuCategoryService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantMenuCategoryService", (Object) restaurantMenuCategoryService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(restaurantOrchestratorController0, (Class<?>) RestaurantOrchestratorController.class);
      // Undeclared exception!
      try { 
        restaurantOrchestratorController0.updateRestaurantMenuOfARestaurant((RestaurantMenuInputPayload) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.RestaurantOrchestratorController", e);
      }
  }
}
