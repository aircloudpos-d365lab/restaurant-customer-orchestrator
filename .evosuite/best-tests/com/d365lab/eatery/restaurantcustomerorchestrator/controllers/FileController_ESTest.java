/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 09:00:41 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.controllers.FileController;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.RestaurantOrchestratorService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.FileStorageServiceImpl;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.VfsResource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileController_ESTest extends FileController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileController fileController0 = new FileController();
      byte[] byteArray0 = new byte[9];
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileController0.uploadFile(multipartFile0, "_+PGY5ltU99");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.FileController", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileController fileController0 = new FileController();
      FileStorageServiceImpl fileStorageServiceImpl0 = mock(FileStorageServiceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Resource) null).when(fileStorageServiceImpl0).loadFileAsResource(anyString());
      Injector.inject(fileController0, (Class<?>) FileController.class, "fileStorageServiceImpl", (Object) fileStorageServiceImpl0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileController0, (Class<?>) FileController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Injector.validateBean(fileController0, (Class<?>) FileController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletContext) null).when(httpServletRequest0).getServletContext();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      // Undeclared exception!
      try { 
        fileController0.downloadFile((String) null, httpServletRequestWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.controllers.FileController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileController fileController0 = new FileController();
      Integer integer0 = new Integer(1039);
      VfsResource vfsResource0 = new VfsResource(integer0);
      FileStorageServiceImpl fileStorageServiceImpl0 = mock(FileStorageServiceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(vfsResource0).when(fileStorageServiceImpl0).loadFileAsResource(anyString());
      Injector.inject(fileController0, (Class<?>) FileController.class, "fileStorageServiceImpl", (Object) fileStorageServiceImpl0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileController0, (Class<?>) FileController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Injector.validateBean(fileController0, (Class<?>) FileController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletContext) null).when(httpServletRequest0).getServletContext();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      // Undeclared exception!
      try { 
        fileController0.downloadFile("\"", httpServletRequestWrapper0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.springframework.core.io.VfsUtils
         //
         verifyException("org.springframework.core.io.VfsResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileController fileController0 = new FileController();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("8Z[=}>Q$@Bq :", classLoader0);
      FileStorageServiceImpl fileStorageServiceImpl0 = mock(FileStorageServiceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(classPathResource0).when(fileStorageServiceImpl0).loadFileAsResource(anyString());
      Injector.inject(fileController0, (Class<?>) FileController.class, "fileStorageServiceImpl", (Object) fileStorageServiceImpl0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileController0, (Class<?>) FileController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Injector.validateBean(fileController0, (Class<?>) FileController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletContext) null).when(httpServletRequest0).getServletContext();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ResponseEntity<Resource> responseEntity0 = fileController0.downloadFile("", httpServletRequestWrapper0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileController fileController0 = new FileController();
      FileSystemResource fileSystemResource0 = new FileSystemResource("/Egrk$\"[)wl@B");
      FileStorageServiceImpl fileStorageServiceImpl0 = mock(FileStorageServiceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemResource0).when(fileStorageServiceImpl0).loadFileAsResource(anyString());
      Injector.inject(fileController0, (Class<?>) FileController.class, "fileStorageServiceImpl", (Object) fileStorageServiceImpl0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileController0, (Class<?>) FileController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Injector.validateBean(fileController0, (Class<?>) FileController.class);
      ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());
      doReturn("\"").when(servletContext0).getMimeType(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(servletContext0).when(httpServletRequest0).getServletContext();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      // Undeclared exception!
      try { 
        fileController0.downloadFile("\"", httpServletRequestWrapper0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type \"\"\": does not contain '/'
         //
         verifyException("org.springframework.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileController fileController0 = new FileController();
      FileStorageServiceImpl fileStorageServiceImpl0 = mock(FileStorageServiceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileStorageServiceImpl0).storeFile(any(org.springframework.web.multipart.MultipartFile.class));
      Injector.inject(fileController0, (Class<?>) FileController.class, "fileStorageServiceImpl", (Object) fileStorageServiceImpl0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileController0, (Class<?>) FileController.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Injector.validateBean(fileController0, (Class<?>) FileController.class);
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileController0.uploadFile(multipartFile0, "IS?^Z\"Ls");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current ServletRequestAttributes
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }
}
