/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 09:05:25 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantLoginStatus;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.json.simple.JSONObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestaurantLoginStatus_ESTest extends RestaurantLoginStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      String string0 = restaurantLoginStatus0.getRestaurantUserName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      restaurantLoginStatus0.setRestaurantUserName("\b`+Ts");
      String string0 = restaurantLoginStatus0.getRestaurantUserName();
      assertEquals("\b`+Ts", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(0, 0, 862, (-2090), 635);
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus("", ",71<*l", integer0, mockDate0);
      restaurantLoginStatus0.getRestaurantUserLoginStatus();
      assertEquals("", restaurantLoginStatus0.getRestaurantUserName());
      assertEquals(",71<*l", restaurantLoginStatus0.getRestaurantOutletTenantId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = Integer.getInteger("&", 123);
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus("sl", "sl", integer0, (Date) null);
      Integer integer1 = restaurantLoginStatus0.getRestaurantUserLoginStatus();
      assertEquals(123, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate();
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus("", "", integer0, mockDate0);
      Date date0 = restaurantLoginStatus0.getRestaurantUserLastLoggedInAt();
      assertSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      restaurantLoginStatus0.setRestaurantOutletTenantId("com.fasterxml.jackson.annotation.JsonFormat$Feature");
      String string0 = restaurantLoginStatus0.getRestaurantOutletTenantId();
      assertEquals("com.fasterxml.jackson.annotation.JsonFormat$Feature", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(716);
      MockDate mockDate0 = new MockDate((-1280L));
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus("", "", integer0, mockDate0);
      String string0 = restaurantLoginStatus0.getRestaurantOutletTenantId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus("", "$*GC.wf;nbidrGao", integer0, (Date) null);
      String string0 = restaurantLoginStatus0.getRestaurantUserName();
      assertEquals("$*GC.wf;nbidrGao", restaurantLoginStatus0.getRestaurantOutletTenantId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      Date date0 = restaurantLoginStatus0.getRestaurantUserLastLoggedInAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-3576));
      MockDate mockDate0 = new MockDate((-3576), (-3576), 1701, 19, 1701);
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus((String) null, (String) null, integer0, mockDate0);
      JSONObject jSONObject0 = RestaurantLoginStatus.toJSON(restaurantLoginStatus0);
      assertEquals(4, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      restaurantLoginStatus0.setRestaurantUserLastLoggedInAt(date0);
      assertNull(restaurantLoginStatus0.getRestaurantUserName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      Integer integer0 = new Integer((-1));
      restaurantLoginStatus0.setRestaurantUserLoginStatus(integer0);
      Integer integer1 = restaurantLoginStatus0.getRestaurantUserLoginStatus();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      // Undeclared exception!
      try { 
        RestaurantLoginStatus.toJSON(restaurantLoginStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantLoginStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      Integer integer0 = restaurantLoginStatus0.getRestaurantUserLoginStatus();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RestaurantLoginStatus restaurantLoginStatus0 = new RestaurantLoginStatus();
      String string0 = restaurantLoginStatus0.getRestaurantOutletTenantId();
      assertNull(string0);
  }
}
