/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 08:58:43 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderInputPayload;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestaurantOrderInputPayload_ESTest extends RestaurantOrderInputPayload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setRestaurantTenantId("*8s");
      String string0 = restaurantOrderInputPayload0.getRestaurantTenantId();
      assertEquals("*8s", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setRestaurantTenantId("");
      String string0 = restaurantOrderInputPayload0.getRestaurantTenantId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setRestaurantOrderMode("{yH~&uKbhvRe/W;");
      String string0 = restaurantOrderInputPayload0.getRestaurantOrderMode();
      assertEquals("{yH~&uKbhvRe/W;", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setRestaurantOrderMode("");
      String string0 = restaurantOrderInputPayload0.getRestaurantOrderMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(0.0);
      restaurantOrderInputPayload0.setOrderTotalSgstPercentage(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotalSgstPercentage();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double((-3258.341988176342));
      restaurantOrderInputPayload0.setOrderTotalSgstPercentage(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotalSgstPercentage();
      assertEquals((-3258.341988176342), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(729);
      restaurantOrderInputPayload0.setOrderTotalSgstPercentage(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotalSgstPercentage();
      assertEquals(729.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(0.0);
      restaurantOrderInputPayload0.setOrderTotalCgstPercentage(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotalCgstPercentage();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(1.0);
      restaurantOrderInputPayload0.setOrderTotalCgstPercentage(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotalCgstPercentage();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double((-2073));
      restaurantOrderInputPayload0.setOrderTotalCgstPercentage(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotalCgstPercentage();
      assertEquals((-2073.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(0.0);
      restaurantOrderInputPayload0.setOrderTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotal();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double((-3000));
      restaurantOrderInputPayload0.setOrderTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotal();
      assertEquals((-3000.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderSpecialInstructions("com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderInputPayload");
      String string0 = restaurantOrderInputPayload0.getOrderSpecialInstructions();
      assertEquals("com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantOrderInputPayload", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderSpecialInstructions("");
      String string0 = restaurantOrderInputPayload0.getOrderSpecialInstructions();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderPaymentMode("^QJ");
      String string0 = restaurantOrderInputPayload0.getOrderPaymentMode();
      assertEquals("^QJ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderPaymentMode("");
      String string0 = restaurantOrderInputPayload0.getOrderPaymentMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double((-1.0));
      restaurantOrderInputPayload0.setOrderGrandTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderGrandTotal();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(0.0);
      restaurantOrderInputPayload0.setOrderGrandTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderGrandTotal();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(1.0);
      restaurantOrderInputPayload0.setOrderGrandTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderGrandTotal();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double((-1.0));
      restaurantOrderInputPayload0.setOrderDiscountTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderDiscountTotal();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(0.0);
      restaurantOrderInputPayload0.setOrderDiscountTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderDiscountTotal();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(3406.2502061632213);
      restaurantOrderInputPayload0.setOrderDiscountTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderDiscountTotal();
      assertEquals(3406.2502061632213, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderChannel("@<u?H=6+bD=#9X");
      String string0 = restaurantOrderInputPayload0.getOrderChannel();
      assertEquals("@<u?H=6+bD=#9X", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderChannel("");
      String string0 = restaurantOrderInputPayload0.getOrderChannel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderAppliedCoupon("36_ciX8Q");
      String string0 = restaurantOrderInputPayload0.getOrderAppliedCoupon();
      assertEquals("36_ciX8Q", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderAppliedCoupon("");
      String string0 = restaurantOrderInputPayload0.getOrderAppliedCoupon();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setIsOrderStartedPreparingByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderStartedPreparingByRestaurant();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(3584);
      restaurantOrderInputPayload0.setIsOrderStartedPreparingByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderStartedPreparingByRestaurant();
      assertEquals(3584, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(12);
      restaurantOrderInputPayload0.setIsOrderStartedPreparingByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderStartedPreparingByRestaurant();
      assertEquals(12, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-14));
      restaurantOrderInputPayload0.setIsOrderStartedPreparingByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderStartedPreparingByRestaurant();
      assertEquals((-14), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setIsOrderPreparedByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderPreparedByRestaurant();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(3584);
      restaurantOrderInputPayload0.setIsOrderPreparedByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderPreparedByRestaurant();
      assertEquals(3584, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-574));
      restaurantOrderInputPayload0.setIsOrderPreparedByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderPreparedByRestaurant();
      assertEquals((-574), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(1281);
      restaurantOrderInputPayload0.setIsOrderPaymentConfirmed(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderPaymentConfirmed();
      assertEquals(1281, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-3438));
      restaurantOrderInputPayload0.setIsOrderPaymentConfirmed(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderPaymentConfirmed();
      assertEquals((-3438), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setIsOrderOutForDelivery(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderOutForDelivery();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(1);
      restaurantOrderInputPayload0.setIsOrderOutForDelivery(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderOutForDelivery();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-2073));
      restaurantOrderInputPayload0.setIsOrderOutForDelivery(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderOutForDelivery();
      assertEquals((-2073), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = Integer.valueOf(0);
      restaurantOrderInputPayload0.setIsOrderDelivered(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderDelivered();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(1);
      restaurantOrderInputPayload0.setIsOrderDelivered(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderDelivered();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-1));
      restaurantOrderInputPayload0.setIsOrderDelivered(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderDelivered();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(778);
      restaurantOrderInputPayload0.setIsOrderCancelledByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByRestaurant();
      assertEquals(778, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setIsOrderCancelledByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByRestaurant();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-3000));
      restaurantOrderInputPayload0.setIsOrderCancelledByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByRestaurant();
      assertEquals((-3000), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-3438));
      restaurantOrderInputPayload0.setIsOrderCancelledByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByRestaurant();
      assertEquals((-3438), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(1);
      restaurantOrderInputPayload0.setIsOrderCancelledByCustomer(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByCustomer();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setIsOrderCancelledByCustomer(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByCustomer();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-3781));
      restaurantOrderInputPayload0.setIsOrderCancelledByCustomer(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByCustomer();
      assertEquals((-3781), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-77));
      restaurantOrderInputPayload0.setIsOrderCancelledByCustomer(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderCancelledByCustomer();
      assertEquals((-77), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setIsOrderAcceptedByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderAcceptedByRestaurant();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-2263));
      restaurantOrderInputPayload0.setIsOrderAcceptedByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderAcceptedByRestaurant();
      assertEquals((-2263), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(2759);
      restaurantOrderInputPayload0.setIsOrderAcceptedByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderAcceptedByRestaurant();
      assertEquals(2759, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setCustomerTenantId("z;Hs/+{<-uv");
      String string0 = restaurantOrderInputPayload0.getCustomerTenantId();
      assertEquals("z;Hs/+{<-uv", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setCustomerTenantId("");
      String string0 = restaurantOrderInputPayload0.getCustomerTenantId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer((-3039));
      restaurantOrderInputPayload0.setCartId(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getCartId();
      assertEquals((-3039), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setCartId(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getCartId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(299);
      restaurantOrderInputPayload0.setCartId(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getCartId();
      assertEquals(299, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(729);
      restaurantOrderInputPayload0.setCartId(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getCartId();
      assertEquals(729, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setCancellationReason("AW|o39~R,T]");
      String string0 = restaurantOrderInputPayload0.getCancellationReason();
      assertEquals("AW|o39~R,T]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setCancellationReason("");
      String string0 = restaurantOrderInputPayload0.getCancellationReason();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      // Undeclared exception!
      try { 
        restaurantOrderInputPayload0.getOrderDeliveryAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderDeliveryAddress("");
      String string0 = restaurantOrderInputPayload0.getOrderDeliveryAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = restaurantOrderInputPayload0.getOrderDiscountTotal();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderStartedPreparingByRestaurant();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getCancellationReason();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getOrderPaymentMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderCancelledByRestaurant();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(0);
      restaurantOrderInputPayload0.setIsOrderPaymentConfirmed(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderPaymentConfirmed();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderAcceptedByRestaurant();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = restaurantOrderInputPayload0.getOrderGrandTotal();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderPreparedByRestaurant();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = restaurantOrderInputPayload0.getOrderTotalSgstPercentage();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getOrderSpecialInstructions();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getCustomerTenantId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getRestaurantTenantId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderCancelledByCustomer();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = new Integer(1);
      restaurantOrderInputPayload0.setIsOrderPreparedByRestaurant(integer0);
      Integer integer1 = restaurantOrderInputPayload0.getIsOrderPreparedByRestaurant();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = restaurantOrderInputPayload0.getOrderTotalCgstPercentage();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderOutForDelivery();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getOrderAppliedCoupon();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getRestaurantOrderMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      String string0 = restaurantOrderInputPayload0.getOrderChannel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderPaymentConfirmed();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      restaurantOrderInputPayload0.setOrderDeliveryAddress("");
      String string0 = restaurantOrderInputPayload0.getOrderDeliveryAddress();
      assertEquals("SELF", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = new Double(2008L);
      restaurantOrderInputPayload0.setOrderTotal(double0);
      Double double1 = restaurantOrderInputPayload0.getOrderTotal();
      assertEquals(2008.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Double double0 = restaurantOrderInputPayload0.getOrderTotal();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getIsOrderDelivered();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      RestaurantOrderInputPayload restaurantOrderInputPayload0 = new RestaurantOrderInputPayload();
      Integer integer0 = restaurantOrderInputPayload0.getCartId();
      assertNull(integer0);
  }
}
