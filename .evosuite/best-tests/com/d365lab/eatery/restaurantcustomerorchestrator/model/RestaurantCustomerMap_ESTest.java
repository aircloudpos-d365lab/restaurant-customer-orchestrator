/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 09:03:55 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.CustomerInfo;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantCustomerMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestaurantCustomerMap_ESTest extends RestaurantCustomerMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap();
      String string0 = restaurantCustomerMap0.getRestaurantTenantId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap();
      restaurantCustomerMap0.setRestaurantTenantId("");
      String string0 = restaurantCustomerMap0.getRestaurantTenantId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector<CustomerInfo> vector0 = new Vector<CustomerInfo>();
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap("", vector0);
      List<CustomerInfo> list0 = restaurantCustomerMap0.getCustomerInfoList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PriorityQueue<CustomerInfo> priorityQueue0 = new PriorityQueue<CustomerInfo>();
      CustomerInfo customerInfo0 = new CustomerInfo();
      priorityQueue0.add(customerInfo0);
      Vector<CustomerInfo> vector0 = new Vector<CustomerInfo>(priorityQueue0);
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap("O4m_i[:/$0<u W", vector0);
      List<CustomerInfo> list0 = restaurantCustomerMap0.getCustomerInfoList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<CustomerInfo> linkedList0 = new LinkedList<CustomerInfo>();
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap("RestaurantCustomerMap{restaurantTenantId='", linkedList0);
      String string0 = restaurantCustomerMap0.toString();
      assertEquals("RestaurantCustomerMap{restaurantTenantId='RestaurantCustomerMap{restaurantTenantId='', customerInfoList=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap();
      List<CustomerInfo> list0 = restaurantCustomerMap0.getCustomerInfoList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap("uak .g)u~0bt&j_N[", (List<CustomerInfo>) null);
      String string0 = restaurantCustomerMap0.getRestaurantTenantId();
      assertEquals("uak .g)u~0bt&j_N[", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RestaurantCustomerMap restaurantCustomerMap0 = new RestaurantCustomerMap();
      restaurantCustomerMap0.setCustomerInfoList((List<CustomerInfo>) null);
      assertNull(restaurantCustomerMap0.getRestaurantTenantId());
  }
}
