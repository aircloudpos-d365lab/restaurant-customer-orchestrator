/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 08:51:13 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantLogin;
import com.d365lab.eatery.restaurantcustomerorchestrator.repositories.RestaurantLoginRepository;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOnboardingServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javatuples.Pair;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestaurantOnboardingServiceImpl_ESTest extends RestaurantOnboardingServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Vector<RestaurantLogin> vector0 = new Vector<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      vector0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantLoginRepository0).findRestaurantLoginForARestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.verifyPassword("6B792gs=w8c.RN9ULs#", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.utils.restaurantlogin.PasswordUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantLoginRepository0).findRestaurantLoginForARestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.verifyPassword(";yoNKq$MU~XPZix.", "94st;M$41Y1)E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOnboardingServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Stack<RestaurantLogin> stack0 = new Stack<RestaurantLogin>();
      Integer integer0 = new Integer(1131);
      MockDate mockDate0 = new MockDate(1131);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantLoginRepository0).findRestaurantLoginForARestaurant(anyString());
      RestaurantLogin restaurantLogin0 = new RestaurantLogin("", "", "", "", (String) null, "", "g$k", integer0, mockDate0);
      stack0.add(restaurantLogin0);
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.verifyPassword("Q", "Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the salt parameter must not be empty
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Vector<RestaurantLogin> vector0 = new Vector<RestaurantLogin>();
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantLoginRepository0).findRestaurantLoginForARestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.verifyPassword("(@/6B>b", "(@/6B>b");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      ArrayList<RestaurantLogin> arrayList0 = new ArrayList<RestaurantLogin>();
      Stack<RestaurantLogin> stack0 = new Stack<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      stack0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, stack0).when(restaurantLoginRepository0).findLoggedInRestaurant(anyString());
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://13.233.89.218:8084/api/cache/login/status/null_null");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "0<^[?@07&qs");
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      restaurantOnboardingServiceImpl0.logoutRestaurant("");
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.logoutRestaurant("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not extract response: no suitable HttpMessageConverter found for response type [class com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantLoginStatus] and content type [application/octet-stream]
         //
         verifyException("org.springframework.web.client.HttpMessageConverterExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantLoginRepository0).findLoggedInRestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.logoutRestaurant("ACCEPT_CASE_INSENSITIVE_VALUES");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOnboardingServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      ArrayList<RestaurantLogin> arrayList0 = new ArrayList<RestaurantLogin>();
      Stack<RestaurantLogin> stack0 = new Stack<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      stack0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, stack0).when(restaurantLoginRepository0).findLoggedInRestaurant(anyString());
      restaurantLogin0.setRestaurantOutletTenantId("RestaurantLogin{restaurantLoginId=null, restaurantUsername='null', restaurantEncryptedPassword='null', restaurantSalt='null', restaurantMasterTenantId='null', restaurantOutletTenantId='null', restaurantBrandName='null', restaurantOutletName='null', isLoggedIn=null, lastLoggedInAt=null}");
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      restaurantOnboardingServiceImpl0.logoutRestaurant("");
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.logoutRestaurant("RestaurantLogin{restaurantLoginId=null, restaurantUsername='null', restaurantEncryptedPassword='null', restaurantSalt='null', restaurantMasterTenantId='null', restaurantOutletTenantId='null', restaurantBrandName='null', restaurantOutletName='null', isLoggedIn=null, lastLoggedInAt=null}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough variable values available to expand 'restaurantLoginId=null, restaurantUsername='null', restaurantEncryptedPassword='null', restaurantSalt='null', restaurantMasterTenantId='null', restaurantOutletTenantId='null', restaurantBrandName='null', restaurantOutletName='null', isLoggedIn=null, lastLoggedInAt=null'
         //
         verifyException("org.springframework.web.util.UriComponents$VarArgsTemplateVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantLoginRepository0).findRestaurantLoginForARestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.generateLogin("Response: {}", "Response: {}", "Response: {}", "Response: {}", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Stack<RestaurantLogin> stack0 = new Stack<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      ArrayList<RestaurantLogin> arrayList0 = new ArrayList<RestaurantLogin>();
      arrayList0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0, arrayList0, arrayList0, stack0).when(restaurantLoginRepository0).findRestaurantLoginForAGivenMasterTenantId(anyString());
      doReturn(stack0, stack0).when(restaurantLoginRepository0).findTenantsForARestaurantBrand(anyString());
      Random.setNextRandom(1131);
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      Pair<String, String> pair0 = restaurantOnboardingServiceImpl0.generateTenant("http://13.233.89.218:8084/api/cacheVlogin/status/", "http://13.233.89.218:8084/api/cacheVlogin/status/");
      Pair<String, String> pair1 = restaurantOnboardingServiceImpl0.generateTenant("http://13.233.89.218:8084/api/cacheVlogin/status/", "http://13.233.89.218:8084/api/cacheVlogin/status/");
      assertTrue(pair1.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Stack<RestaurantLogin> stack0 = new Stack<RestaurantLogin>();
      Integer integer0 = new Integer(1131);
      MockDate mockDate0 = new MockDate(1131);
      RestaurantLogin restaurantLogin0 = new RestaurantLogin("SUCCESS", "SUCCESS", "SUCCESS", "Vi'\"H$}u#VJd0", "", "Vi'\"H$}u#VJd0", "Vi'\"H$}u#VJd0", integer0, mockDate0);
      ArrayList<RestaurantLogin> arrayList0 = new ArrayList<RestaurantLogin>();
      arrayList0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0, arrayList0, (List) null).when(restaurantLoginRepository0).findRestaurantLoginForAGivenMasterTenantId(anyString());
      doReturn(stack0, stack0).when(restaurantLoginRepository0).findTenantsForARestaurantBrand(anyString());
      Random.setNextRandom(1131);
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      restaurantOnboardingServiceImpl0.generateTenant("", "g$k");
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.generateTenant(".PackageVersion", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Stack<RestaurantLogin> stack0 = new Stack<RestaurantLogin>();
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantLoginRepository0).findTenantsForARestaurantBrand(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      restaurantOnboardingServiceImpl0.generateTenant("", "g$k");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Vector<RestaurantLogin> vector0 = new Vector<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      vector0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantLoginRepository0).findTenantsForARestaurantBrand(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      Pair<String, String> pair0 = restaurantOnboardingServiceImpl0.generateTenant("", "_1");
      assertEquals(2, pair0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://13.233.89.218:8084/api/cache/login/status/null_null");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      ArrayList<RestaurantLogin> arrayList0 = new ArrayList<RestaurantLogin>();
      Stack<RestaurantLogin> stack0 = new Stack<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      stack0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, stack0).when(restaurantLoginRepository0).findLoggedInRestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      restaurantOnboardingServiceImpl0.logoutRestaurant("");
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.logoutRestaurant("RestaurantLogin{restaurantLoginId=null, restaurantUsername='null', restaurantEncryptedPassword='null', restaurantSalt='null', restaurantMasterTenantId='null', restaurantOutletTenantId='null', restaurantBrandName='null', restaurantOutletName='null', isLoggedIn=null, lastLoggedInAt=null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/login/status/add/null_null\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Vector<RestaurantLogin> vector0 = new Vector<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      vector0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantLoginRepository0).findLoggedInRestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOnboardingServiceImpl0.logoutRestaurant("WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 404 Not Found
         //
         verifyException("org.springframework.web.client.HttpClientErrorException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Vector<RestaurantLogin> vector0 = new Vector<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      restaurantLogin0.setRestaurantSalt("TbR");
      vector0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantLoginRepository0).findRestaurantLoginForARestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      List<RestaurantLogin> list0 = restaurantOnboardingServiceImpl0.verifyPassword("MbXH8td/XYz{y", "MbXH8td/XYz{y");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RestaurantOnboardingServiceImpl restaurantOnboardingServiceImpl0 = new RestaurantOnboardingServiceImpl();
      Vector<RestaurantLogin> vector0 = new Vector<RestaurantLogin>();
      RestaurantLogin restaurantLogin0 = new RestaurantLogin();
      vector0.add(restaurantLogin0);
      RestaurantLoginRepository restaurantLoginRepository0 = mock(RestaurantLoginRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantLoginRepository0).findRestaurantLoginForARestaurant(anyString());
      Injector.inject(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class, "restaurantLoginRepository", (Object) restaurantLoginRepository0);
      Injector.validateBean(restaurantOnboardingServiceImpl0, (Class<?>) RestaurantOnboardingServiceImpl.class);
      String string0 = restaurantOnboardingServiceImpl0.generateLogin("MbXH8td/XYz{y", "MbXH8td/XYz{y", "MbXH8td/XYz{y", "MbXH8td/XYz{y", "", "MbXH8td/XYz{y");
      assertEquals("SUCCESS", string0);
  }
}
