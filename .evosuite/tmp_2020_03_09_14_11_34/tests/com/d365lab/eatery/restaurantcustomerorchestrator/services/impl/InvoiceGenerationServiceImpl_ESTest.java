/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 08:57:41 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantOrder;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.Item;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.OrderInvoice;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantDetails;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.CartService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.RestaurantOrchestratorService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.RestaurantOrderService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.InvoiceGenerationServiceImpl;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InvoiceGenerationServiceImpl_ESTest extends InvoiceGenerationServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InvoiceGenerationServiceImpl invoiceGenerationServiceImpl0 = new InvoiceGenerationServiceImpl();
      Stack<Item> stack0 = new Stack<Item>();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(cartService0).getItemListOfACart(anyString() , anyInt());
      Injector.inject(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantDetails restaurantDetails0 = mock(RestaurantDetails.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(restaurantDetails0).getRestaurantBrandName();
      doReturn((String) null).when(restaurantDetails0).getRestaurantFssaiLicenseNumber();
      doReturn((String) null).when(restaurantDetails0).getRestaurantGstNumber();
      doReturn((String) null).when(restaurantDetails0).getRestaurantOutletName();
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantDetails0).when(restaurantOrchestratorService0).getRestaurantDetailsForRestaurant(anyString());
      Injector.inject(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      Integer integer0 = new Integer(0);
      RestaurantOrder restaurantOrder0 = mock(RestaurantOrder.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(restaurantOrder0).getCartId();
      doReturn((String) null).when(restaurantOrder0).getOrderAppliedCoupon();
      doReturn((String) null).when(restaurantOrder0).getOrderDeliveryAddress();
      doReturn((Double) null).when(restaurantOrder0).getOrderDiscountTotal();
      doReturn((Double) null).when(restaurantOrder0).getOrderGrandTotal();
      doReturn(integer0).when(restaurantOrder0).getOrderInvoiceId();
      doReturn((Double) null, (Double) null).when(restaurantOrder0).getOrderTotal();
      doReturn((String) null).when(restaurantOrder0).getRestaurantOrderMode();
      doReturn("@vVB>tF}\"!Igyq|").when(restaurantOrder0).getRestaurantTenantId();
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantOrder0).when(restaurantOrderService0).getOrderDetails(anyInt());
      Injector.inject(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class);
      // Undeclared exception!
      try { 
        invoiceGenerationServiceImpl0.generateInvoice(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.InvoiceGenerationServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InvoiceGenerationServiceImpl invoiceGenerationServiceImpl0 = new InvoiceGenerationServiceImpl();
      CartService cartService0 = mock(CartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class, "cartService", (Object) cartService0);
      RestaurantOrchestratorService restaurantOrchestratorService0 = mock(RestaurantOrchestratorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class, "restaurantOrchestratorService", (Object) restaurantOrchestratorService0);
      RestaurantOrderService restaurantOrderService0 = mock(RestaurantOrderService.class, new ViolatedAssumptionAnswer());
      Injector.inject(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class, "restaurantOrderService", (Object) restaurantOrderService0);
      Injector.validateBean(invoiceGenerationServiceImpl0, (Class<?>) InvoiceGenerationServiceImpl.class);
      OrderInvoice orderInvoice0 = invoiceGenerationServiceImpl0.generateInvoice((Integer) null);
      assertNull(orderInvoice0);
  }
}
