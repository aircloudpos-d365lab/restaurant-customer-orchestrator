/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 08:46:59 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantInfo;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantMenu;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantMenuCustomization;
import com.d365lab.eatery.restaurantcustomerorchestrator.dao.RestaurantPaymentOptions;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.Item;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuInputPayload;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.RestaurantMenuWithCustomization;
import com.d365lab.eatery.restaurantcustomerorchestrator.model.enums.RestaurantPaymentMode;
import com.d365lab.eatery.restaurantcustomerorchestrator.repositories.RestaurantInfoRepository;
import com.d365lab.eatery.restaurantcustomerorchestrator.repositories.RestaurantMenuCustomizationRepository;
import com.d365lab.eatery.restaurantcustomerorchestrator.repositories.RestaurantMenuRepository;
import com.d365lab.eatery.restaurantcustomerorchestrator.repositories.RestaurantPaymentOptionsRepository;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.RestaurantOnboardingService;
import com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.javatuples.Pair;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestaurantOrchestratorServiceImpl_ESTest extends RestaurantOrchestratorServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      String string0 = "-VYcmt-\\u_LISLH\"&";
      RestaurantInfo restaurantInfo0 = new RestaurantInfo("ADJUST_DATES_TO_CONTEXT_TIME_ZONE", "ADJUST_DATES_TO_CONTEXT_TIME_ZONE", "ADJUST_DATES_TO_CONTEXT_TIME_ZONE", "ADJUST_DATES_TO_CONTEXT_TIME_ZONE", "ADJUST_DATES_TO_CONTEXT_TIME_ZONE", "ADJUST_DATES_TO_CONTEXT_TIME_ZONE", "ADJUST_DATES_TO_CONTEXT_TIME_ZONE", "ADJUST_DATES_TO_CONTEXT_TIME_ZONE", string0, "restaurant info is already present for restaurant with tenant-id:", "p6YSVb|*R~8", "p6YSVb|*R~8", "p6YSVb|*R~8", "s9WxgNq0L2Cj");
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantInfo0).when(restaurantInfoRepository0).findRestaurantInfoForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      restaurantOrchestratorServiceImpl0.updateRestaurantEmailInfoForRestaurant("", "javax.xml.bind.Binder");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantPaymentOptionsRepository0).findRestaurantPaymentOptionsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      List<RestaurantPaymentOptions> list0 = restaurantOrchestratorServiceImpl0.getRestaurantPaymentOptionsForRestaurant("`eyDjt,");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      Stack<RestaurantPaymentOptions> stack0 = new Stack<RestaurantPaymentOptions>();
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantPaymentOptionsRepository0).findRestaurantPaymentOptionsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      List<RestaurantPaymentOptions> list0 = restaurantOrchestratorServiceImpl0.getRestaurantPaymentOptionsForRestaurant("`eyDjt,");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      Stack<RestaurantPaymentOptions> stack0 = new Stack<RestaurantPaymentOptions>();
      Integer integer0 = new Integer((-990));
      RestaurantPaymentMode restaurantPaymentMode0 = RestaurantPaymentMode.GOOGLE_PAY;
      RestaurantPaymentOptions restaurantPaymentOptions0 = new RestaurantPaymentOptions(integer0, "Could not create menu for the restaurant.", restaurantPaymentMode0, "EZ<_.U(HtK3fz*N");
      stack0.add(restaurantPaymentOptions0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantPaymentOptionsRepository0).findRestaurantPaymentOptionsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      List<RestaurantPaymentOptions> list0 = restaurantOrchestratorServiceImpl0.getRestaurantPaymentOptionsForRestaurant("`eyDjt,");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      LinkedList<RestaurantMenuCustomization> linkedList0 = new LinkedList<RestaurantMenuCustomization>();
      Integer integer0 = new Integer(12);
      RestaurantMenuCustomization restaurantMenuCustomization0 = new RestaurantMenuCustomization("H]N!G,pBIG2DeNXY", integer0, "H]N!G,pBIG2DeNXY");
      linkedList0.add(restaurantMenuCustomization0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantMenuCustomizationRepository0).findAllMenuCustomizationsForRestaurant(anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      List<RestaurantMenuCustomization> list0 = restaurantOrchestratorServiceImpl0.getAllRestaurantMenuCustomizationForMenu(integer0);
      assertTrue(list0.contains(restaurantMenuCustomization0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      Vector<RestaurantMenuCustomization> vector0 = new Vector<RestaurantMenuCustomization>();
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantMenuCustomizationRepository0).findAllMenuCustomizationsForRestaurant(anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer(0);
      List<RestaurantMenuCustomization> list0 = restaurantOrchestratorServiceImpl0.getAllRestaurantMenuCustomizationForMenu(integer0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantInfoRepository0).findAll();
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      List<RestaurantInfo> list0 = restaurantOrchestratorServiceImpl0.getAllRestaurantInfo();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      Stack<RestaurantInfo> stack0 = new Stack<RestaurantInfo>();
      RestaurantInfo restaurantInfo0 = new RestaurantInfo();
      stack0.add(restaurantInfo0);
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantInfoRepository0).findAll();
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      List<RestaurantInfo> list0 = restaurantOrchestratorServiceImpl0.getAllRestaurantInfo();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      ArrayList<RestaurantMenuWithCustomization> arrayList0 = new ArrayList<RestaurantMenuWithCustomization>();
      Vector<RestaurantMenuWithCustomization> vector0 = new Vector<RestaurantMenuWithCustomization>(arrayList0);
      RestaurantMenu restaurantMenu0 = new RestaurantMenu();
      LinkedList<RestaurantMenuCustomization> linkedList0 = new LinkedList<RestaurantMenuCustomization>();
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization(restaurantMenu0, linkedList0);
      vector0.add(restaurantMenuWithCustomization0);
      List<Item> list0 = restaurantOrchestratorServiceImpl0.convertRestaurantMenuToCartMenu(vector0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<RestaurantMenuCustomization> stack0 = new Stack<RestaurantMenuCustomization>();
      Integer integer0 = Integer.getInteger("T3G9%KT|yV");
      stack0.add((RestaurantMenuCustomization) null);
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      Double double0 = new Double(1548.7);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer1 = new Integer(18);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "T3G9%KT|yV", "'S1<z?i", "sb1'", "'S1<z?i", "T3G9%KT|yV", "\"Success\"", double0, double0, double0, "Could not access system ClassLoader: ", integer1);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer1, restaurantMenuInputPayload0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfo restaurantInfo0 = new RestaurantInfo();
      restaurantInfo0.setRestaurantBrandName("!dh myqax#");
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      Item item0 = new Item();
      RestaurantPaymentOptions restaurantPaymentOptions0 = new RestaurantPaymentOptions();
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenu restaurantMenu0 = new RestaurantMenu();
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer(4);
      Double double0 = new Double(6378.137);
      Integer integer1 = new Integer(64);
      String string0 = "";
      restaurantOrchestratorServiceImpl0.updatePhotoUrlForMenuForRestaurant(integer1, "");
      LinkedList<RestaurantMenuWithCustomization> linkedList0 = new LinkedList<RestaurantMenuWithCustomization>();
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      Integer integer2 = Integer.valueOf(64);
      Double double1 = new Double(1153.64);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "eCV %&r{Lbs,}4nB)", "", "eCV %&r{Lbs,}4nB)", ")%", "default@123", "with", double0, double0, double1, "!dh myqax#", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer2, restaurantMenuInputPayload0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      Integer integer0 = new Integer(609);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updatePhotoUrlForMenuForRestaurant(integer0, "org.springframework.web.client.HttpStatusCodeException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.setRestaurantMenuToDeactivate("null,null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.resetRestaurantMenuToActivate("|ft='fHIL+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.getRestaurantMenuWithCustomizationForAMenuId("Could not unmarshal to [");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Could not unmarshal to [\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantMenu) null).when(restaurantMenuRepository0).findMenuOfARestaurantThroughId(anyInt() , anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.getRestaurantMenuForMenuNameAndTenant(integer0, "*F-~*drQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantInfo) null).when(restaurantInfoRepository0).findRestaurantInfoForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      LinkedList<RestaurantMenu> linkedList0 = new LinkedList<RestaurantMenu>();
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantMenuRepository0).findAllMenusForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      Vector<RestaurantPaymentOptions> vector0 = new Vector<RestaurantPaymentOptions>();
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantPaymentOptionsRepository0).findRestaurantPaymentOptionsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.getRestaurantDetailsForRestaurant("Could noL find classT[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(4);
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.getAllRestaurantMenuCustomizationForMenu(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      LinkedList<RestaurantMenuWithCustomization> linkedList0 = new LinkedList<RestaurantMenuWithCustomization>();
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = new RestaurantMenuWithCustomization();
      linkedList0.add(restaurantMenuWithCustomization0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.convertRestaurantMenuToCartMenu(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload();
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.addRestaurantMenu(restaurantMenuInputPayload0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.addRestaurantInfoWithLogin((RestaurantInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      Integer integer0 = new Integer((-1823943320));
      Double double0 = new Double(453.0);
      RestaurantMenu restaurantMenu0 = new RestaurantMenu(integer0, "Djlm\"VZLC]>&b:_A", "-b*>9bFg%h=i]", "PROTECTED_AND_PUBLIC", "menu-customiz|tions are same as earlier!", "-b*>9bFg%h=i]", "PROTECTED_AND_PUBLIC", double0, double0, double0, double0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenu0).when(restaurantMenuRepository0).findByMenuId(anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = restaurantOrchestratorServiceImpl0.getRestaurantMenuWithCustomizationForAMenuId("8");
      assertNotNull(restaurantMenuWithCustomization0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantMenu) null).when(restaurantMenuRepository0).findByMenuId(anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = restaurantOrchestratorServiceImpl0.getRestaurantMenuWithCustomizationForAMenuId("8");
      assertNull(restaurantMenuWithCustomization0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfo restaurantInfo0 = new RestaurantInfo((String) null, (String) null, (String) null, "org.springframework.data.mapping.propertyreferenceexception", "org.springframework.data.mapping.propertyreferenceexception", "%'T?;78__", ",", "iWqdEvO*lJ/u", (String) null, "xu(z+AIwZP&T.6nwG", "J5@Qb(", "I=|}HIq+b4^~*PB@!'_", (String) null, "iWqdEvO*lJ/u");
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantInfo0).when(restaurantInfoRepository0).findRestaurantInfoForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      Stack<RestaurantMenu> stack0 = new Stack<RestaurantMenu>();
      stack0.remove((Object) "I=|}HIq+b4^~*PB@!'_");
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantMenuRepository0).findAllMenusForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      HashSet<RestaurantPaymentOptions> hashSet0 = new HashSet<RestaurantPaymentOptions>();
      Vector<RestaurantPaymentOptions> vector0 = new Vector<RestaurantPaymentOptions>(hashSet0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(restaurantPaymentOptionsRepository0).findRestaurantPaymentOptionsForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      restaurantOrchestratorServiceImpl0.getRestaurantDetailsForRestaurant("");
      String string0 = null;
      Integer integer0 = new Integer(2049);
      Double double0 = new Double(2049);
      Double double1 = new Double(2049);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, ",{", "image", "xu(z+AIwZP&T.6nwG", "org.springframework.data.mapping.propertyreferenceexception", (String) null, (String) null, double0, double1, double1, "1", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      ArrayList<RestaurantMenuCustomization> arrayList0 = new ArrayList<RestaurantMenuCustomization>();
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer((-396));
      Double double0 = new Double((-396));
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "url: {}", "url: {}", "d'N)", "url: {}", "com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer", " ", double0, double0, double0, " ", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/url:%20%7B%7D\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      ArrayList<RestaurantMenuCustomization> arrayList0 = new ArrayList<RestaurantMenuCustomization>();
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "'s]3xLV77PX{", "* +ioU54/}sd", "* +ioU54/}sd", "", "", "'s]3xLV77PX{", double0, double0, double0, "", (Integer) null);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu((Integer) null, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/'s%5D3xLV77PX%7B\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      LinkedList<RestaurantMenuCustomization> linkedList0 = new LinkedList<RestaurantMenuCustomization>();
      Integer integer0 = new Integer(12);
      RestaurantMenuCustomization restaurantMenuCustomization0 = new RestaurantMenuCustomization("H]N!G,pBIG2DeNXY", integer0, "com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl");
      linkedList0.add(restaurantMenuCustomization0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      doReturn(linkedList0).when(restaurantMenuCustomizationRepository0).saveAll(anyIterable());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Double double0 = new Double(0);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "C", "C", "C", "C", "C", (String) null, double0, double0, double0, "UH!TU", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/C\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      ArrayList<RestaurantMenuCustomization> arrayList0 = new ArrayList<RestaurantMenuCustomization>();
      Integer integer0 = new Integer(990);
      RestaurantMenuCustomization restaurantMenuCustomization0 = new RestaurantMenuCustomization("O~", integer0, "O~");
      arrayList0.add(restaurantMenuCustomization0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Double double0 = new Double((-396));
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "url: {}", "url: {}", "d'N)", "url: {}", "com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer", " ", double0, double0, double0, " ", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/url:%20%7B%7D\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      ArrayList<RestaurantMenuCustomization> arrayList0 = new ArrayList<RestaurantMenuCustomization>();
      Integer integer0 = new Integer(990);
      RestaurantMenuCustomization restaurantMenuCustomization0 = new RestaurantMenuCustomization("kdiR?k/?y3", integer0, "kdiR?k/?y3");
      arrayList0.add(restaurantMenuCustomization0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Double double0 = new Double((-396));
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "url: {}", "url: {}", "d'N)", "url: {}", "com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer", "", double0, double0, double0, "", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/url:%20%7B%7D\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      LinkedList<RestaurantMenuCustomization> linkedList0 = new LinkedList<RestaurantMenuCustomization>();
      Integer integer0 = new Integer((-1842));
      RestaurantMenuCustomization restaurantMenuCustomization0 = new RestaurantMenuCustomization(integer0, "\u0002\u0000\u0002\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0003\u0001\u0001\u0005\u0001\u0006\u0001\u0007\u0001\b\u0001\t\u0001\n\u0001\u000B\u0001\f\u0001\r\u0005\u0000\u0001\f\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0000\u0001\u0015\u0001\u0000\u0001\u0015\u0004\u0000\u0001\u0016\u0001\u0017\u0002\u0000\u0001\u0018", integer0, "\u0002\u0000\u0002\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0003\u0001\u0001\u0005\u0001\u0006\u0001\u0007\u0001\b\u0001\t\u0001\n\u0001\u000B\u0001\f\u0001\r\u0005\u0000\u0001\f\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0000\u0001\u0015\u0001\u0000\u0001\u0015\u0004\u0000\u0001\u0016\u0001\u0017\u0002\u0000\u0001\u0018", (Date) null, (Date) null);
      linkedList0.add(restaurantMenuCustomization0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Double double0 = new Double(0);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "o2", "o2", "o2", "o2", "o2", (String) null, double0, double0, double0, "\u0002\u0000\u0002\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0003\u0001\u0001\u0005\u0001\u0006\u0001\u0007\u0001\b\u0001\t\u0001\n\u0001\u000B\u0001\f\u0001\r\u0005\u0000\u0001\f\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0000\u0001\u0015\u0001\u0000\u0001\u0015\u0004\u0000\u0001\u0016\u0001\u0017\u0002\u0000\u0001\u0018", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/o2\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<RestaurantMenuCustomization> stack0 = new Stack<RestaurantMenuCustomization>();
      Integer integer0 = Integer.getInteger("T3G9%KT|yV");
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      doReturn((List<Object>) null).when(restaurantMenuCustomizationRepository0).saveAll(anyIterable());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      Double double0 = new Double(1548.7);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "T3G9%KT|yV", "T3G9%KT|yV", "sb1'", "T3G9%KT|yV", "T3G9%KT|yV", "\"Success\"", double0, double0, double0, "Could not accss system ClassLoader: ", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/T3G9%25KT%7CyV\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stack<RestaurantMenuCustomization> stack0 = new Stack<RestaurantMenuCustomization>();
      RestaurantMenuCustomization restaurantMenuCustomization0 = new RestaurantMenuCustomization();
      stack0.add(restaurantMenuCustomization0);
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      doReturn((List<Object>) null).when(restaurantMenuCustomizationRepository0).saveAll(anyIterable());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      Double double0 = new Double(1548.7);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer(47);
      RestaurantMenuInputPayload restaurantMenuInputPayload0 = new RestaurantMenuInputPayload(integer0, "T3G9%KT|yV", "T3G9%KT|yV", "vs z[H,L", "T3G9%KT|yV", "T3G9%KT|yV", "\"Success\"", double0, double0, double0, "Could not accss system ClassLoader: ", integer0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantMenu(integer0, restaurantMenuInputPayload0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on POST request for \"http://13.233.89.218:8084/api/cache/menu/upload-menu-list-into-cache/T3G9%25KT%7CyV\": protocol doesn't support output; nested exception is java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Stack<RestaurantMenuCustomization> stack0 = new Stack<RestaurantMenuCustomization>();
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(restaurantMenuCustomizationRepository0).findMenuCustomizationsForAMenuForARestaurant(anyString() , anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      Double double0 = new Double(1548.7);
      RestaurantMenu restaurantMenu0 = new RestaurantMenu((Integer) null, "T3G9%KT|yV", "T3G9%KT|yV", "T3G9%KT|yV", "T3G9%KT|yV", "T3G9%KT|yV", "T3G9%KT|yV", double0, double0, double0, double0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantMenu0).when(restaurantMenuRepository0).findMenuOfARestaurantThroughId(anyInt() , anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer(47);
      RestaurantMenuWithCustomization restaurantMenuWithCustomization0 = restaurantOrchestratorServiceImpl0.getRestaurantMenuForMenuNameAndTenant(integer0, "vs z[H,L");
      assertNotNull(restaurantMenuWithCustomization0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((RestaurantInfo) null).when(restaurantInfoRepository0).findRestaurantInfoForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      try { 
        restaurantOrchestratorServiceImpl0.updateRestaurantEmailInfoForRestaurant("", "k{o*ACc}9bd*-");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Restaurant does not exist!
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfo restaurantInfo0 = new RestaurantInfo("com.fasterxml.jackson.databind.ser.std.EnumSerializer", "com.fasterxml.jackson.databind.ser.std.EnumSerializer", (String) null, "com.fasterxml.jackson.databind.ser.std.EnumSerializer", "Restaurant does not exist!", "Restaurant does not exist!", "Restaurant does not exist!", ",12H+", ",12H+", "Restaurant does not exist!", "success", "success", ",12H+", ", recorder=");
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(restaurantInfo0).when(restaurantInfoRepository0).findRestaurantInfoForRestaurant(anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("Restaurant does not exist!", ", recorder=").when(pair0).getValue0();
      doReturn("com.fasterxml.jackson.databind.ser.std.EnumSerializer", (String) null, "Restaurant does not exist!").when(pair0).getValue1();
      restaurantInfo0.setRestaurantEmail("success");
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      doReturn("success").when(restaurantOnboardingService0).generateLogin(anyString() , anyString() , anyString() , anyString() , anyString() , anyString());
      doReturn(pair0).when(restaurantOnboardingService0).generateTenant(anyString() , anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      try { 
        restaurantOrchestratorServiceImpl0.addRestaurantInfoWithLogin(restaurantInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Restaurant Info is already present for restaurant with tenant-id:null
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("urK: {}").when(pair0).getValue0();
      doReturn("urK: {}").when(pair0).getValue1();
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      doReturn("urK: {}").when(restaurantOnboardingService0).generateLogin(anyString() , anyString() , anyString() , anyString() , anyString() , anyString());
      doReturn(pair0).when(restaurantOnboardingService0).generateTenant(anyString() , anyString());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      RestaurantInfo restaurantInfo0 = new RestaurantInfo("d>0:r_", "1c:*ysd", "1c:*ysd", "]", "k?c6a{", "1c:*ysd", "d>0:r_", "1c:*ysd", "1c:*ysd", "d>0:r_", "=#7P_fFBkrI;.\"*#", "d>0:r_", "1c:*ysd", "d>0:r_");
      try { 
        restaurantOrchestratorServiceImpl0.addRestaurantInfoWithLogin(restaurantInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Restaurant login failed to be created for restaurant: d>0:r_and outlet: 1c:*ysd
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      // Undeclared exception!
      try { 
        restaurantOrchestratorServiceImpl0.getRestaurantPaymentOptionsForRestaurant("url: {}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.d365lab.eatery.restaurantcustomerorchestrator.services.impl.RestaurantOrchestratorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      ArrayList<RestaurantInfo> arrayList0 = new ArrayList<RestaurantInfo>();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(restaurantInfoRepository0).findAll();
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      List<RestaurantInfo> list0 = restaurantOrchestratorServiceImpl0.getAllRestaurantInfo();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      restaurantOrchestratorServiceImpl0.resetRestaurantMenuToActivate("");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      LinkedList<RestaurantMenuWithCustomization> linkedList0 = new LinkedList<RestaurantMenuWithCustomization>();
      List<Item> list0 = restaurantOrchestratorServiceImpl0.convertRestaurantMenuToCartMenu(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(restaurantMenuCustomizationRepository0).findAllMenuCustomizationsForRestaurant(anyInt());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      Integer integer0 = new Integer(1950);
      List<RestaurantMenuCustomization> list0 = restaurantOrchestratorServiceImpl0.getAllRestaurantMenuCustomizationForMenu(integer0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RestaurantOrchestratorServiceImpl restaurantOrchestratorServiceImpl0 = new RestaurantOrchestratorServiceImpl();
      RestaurantInfoRepository restaurantInfoRepository0 = mock(RestaurantInfoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantInfoRepository", (Object) restaurantInfoRepository0);
      RestaurantMenuCustomizationRepository restaurantMenuCustomizationRepository0 = mock(RestaurantMenuCustomizationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuCustomizationRepository", (Object) restaurantMenuCustomizationRepository0);
      RestaurantMenuRepository restaurantMenuRepository0 = mock(RestaurantMenuRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantMenuRepository", (Object) restaurantMenuRepository0);
      RestaurantOnboardingService restaurantOnboardingService0 = mock(RestaurantOnboardingService.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantOnboardingService", (Object) restaurantOnboardingService0);
      RestaurantPaymentOptionsRepository restaurantPaymentOptionsRepository0 = mock(RestaurantPaymentOptionsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class, "restaurantPaymentOptionsRepository", (Object) restaurantPaymentOptionsRepository0);
      Injector.validateBean(restaurantOrchestratorServiceImpl0, (Class<?>) RestaurantOrchestratorServiceImpl.class);
      restaurantOrchestratorServiceImpl0.setRestaurantMenuToDeactivate("$AyxW");
  }
}
