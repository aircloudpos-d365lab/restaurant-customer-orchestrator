/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 09 09:08:04 GMT 2020
 */

package com.d365lab.eatery.restaurantcustomerorchestrator.utils.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import com.d365lab.eatery.restaurantcustomerorchestrator.utils.exceptions.ResourceNotFoundException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResourceNotFoundException_ESTest extends ResourceNotFoundException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException("wMz[d", "wMz[d", "wMz[d");
      String string0 = resourceNotFoundException0.getResourceName();
      assertEquals("wMz[d", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException("", "", "");
      String string0 = resourceNotFoundException0.getResourceName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException("", "", "");
      Object object0 = resourceNotFoundException0.getFieldValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException("%s not found with %s : '%s'", "%s not found with %s : '%s'", "%s not found with %s : '%s'");
      String string0 = resourceNotFoundException0.getFieldName();
      assertEquals("%s not found with %s : '%s'", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException("", "", "");
      String string0 = resourceNotFoundException0.getFieldName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException((String) null, (String) null, (Object) null);
      String string0 = resourceNotFoundException0.getResourceName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException((String) null, (String) null, (Object) null);
      String string0 = resourceNotFoundException0.getFieldName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ResourceNotFoundException resourceNotFoundException0 = new ResourceNotFoundException("", "", (Object) null);
      Object object0 = resourceNotFoundException0.getFieldValue();
      assertNull(object0);
  }
}
